/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.60
 * Generated at: 2023-08-24 09:54:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.exoplatform.social.core.space.model.Space;
import org.exoplatform.social.core.space.spi.SpaceService;
import org.exoplatform.container.ExoContainerContext;
import org.exoplatform.services.security.ConversationState;
import org.exoplatform.social.metadata.favorite.FavoriteService;
import org.exoplatform.social.metadata.favorite.model.Favorite;
import org.exoplatform.social.core.identity.model.Identity;
import org.exoplatform.social.core.space.SpaceUtils;
import org.exoplatform.portal.config.UserPortalConfigService;
import org.exoplatform.portal.application.PortalRequestContext;
import org.exoplatform.web.application.RequestContext;
import org.exoplatform.commons.utils.CommonsUtils;
import org.exoplatform.portal.branding.BrandingService;
import java.util.Arrays;
import org.exoplatform.social.core.identity.model.Profile;
import java.util.ArrayList;
import java.util.List;
import org.exoplatform.social.core.manager.IdentityManager;
import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
import java.util.Optional;

public final class bannerLogo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.exoplatform.commons.utils.CommonsUtils");
    _jspx_imports_classes.add("org.exoplatform.social.metadata.favorite.model.Favorite");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("org.exoplatform.services.security.ConversationState");
    _jspx_imports_classes.add("org.exoplatform.social.core.manager.IdentityManager");
    _jspx_imports_classes.add("org.exoplatform.container.ExoContainerContext");
    _jspx_imports_classes.add("org.exoplatform.social.core.identity.model.Profile");
    _jspx_imports_classes.add("org.exoplatform.portal.branding.BrandingService");
    _jspx_imports_classes.add("org.exoplatform.social.metadata.favorite.FavoriteService");
    _jspx_imports_classes.add("org.exoplatform.social.core.identity.model.Identity");
    _jspx_imports_classes.add("org.exoplatform.portal.config.UserPortalConfigService");
    _jspx_imports_classes.add("org.exoplatform.web.application.RequestContext");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.exoplatform.social.core.space.model.Space");
    _jspx_imports_classes.add("org.exoplatform.social.core.space.SpaceUtils");
    _jspx_imports_classes.add("org.exoplatform.portal.application.PortalRequestContext");
    _jspx_imports_classes.add("java.util.Optional");
    _jspx_imports_classes.add("org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider");
    _jspx_imports_classes.add("org.exoplatform.social.core.space.spi.SpaceService");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

  String spaceId = null;
  String logoPath = null;
  String logoTitle = null;
  String portalPath = null;
  String defaultHomePath = "";
  String titleClass = "";
  String imageClass = "";
  String homePath= "";
  int membersNumber= 0;
  boolean isFavorite= false;
  boolean isMember =false;
  List<Profile> managers = new ArrayList<>();
  String spaceDescription= "";
  Space space = SpaceUtils.getSpaceByContext();
  PortalRequestContext requestContext = ((PortalRequestContext) RequestContext.getCurrentInstance());
  IdentityManager identityManager = CommonsUtils.getService(IdentityManager.class);
  UserPortalConfigService portalConfigService = CommonsUtils.getService(UserPortalConfigService.class);

  defaultHomePath = "/portal/" + requestContext.getPortalOwner();
  if (space == null) {
    BrandingService brandingService = CommonsUtils.getService(BrandingService.class);
    logoPath = brandingService.getLogoPath();
    logoTitle = brandingService.getCompanyName();

    portalPath = portalConfigService.getUserHomePage(request.getRemoteUser());
    if (portalPath == null) {
      portalPath = defaultHomePath;
    }
    titleClass = "company";
  } else {
    FavoriteService favoriteService = ExoContainerContext.getService(FavoriteService.class);
    String authenticatedUser = ConversationState.getCurrent().getIdentity().getUserId();
    Identity userIdentity = identityManager.getOrCreateUserIdentity(authenticatedUser);
    spaceId = space.getId();
    SpaceService spaceService = ExoContainerContext.getService(SpaceService.class);
    isMember = spaceService.isMember(space, authenticatedUser);
    isFavorite = favoriteService.isFavorite(new Favorite(space.DEFAULT_SPACE_METADATA_OBJECT_TYPE, space.getId(), null, Long.parseLong(userIdentity.getId())));
    logoPath = space.getAvatarUrl();
    logoTitle = space.getDisplayName();
    String permanentSpaceName = space.getGroupId().split("/")[2];
    portalPath = "/portal/g/:spaces:" + permanentSpaceName + "/" + space.getPrettyName();
    membersNumber = space.getMembers().length;
    spaceDescription = Optional.ofNullable(space.getDescription()).orElse("");
    for(String username : space.getManagers()) {
      Profile profile = identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME, username).getProfile();
      managers.add(profile);
    }
    homePath = Optional.ofNullable(portalConfigService.getUserHomePage(request.getRemoteUser())).orElse(defaultHomePath);
  }

  String directionVuetifyClass = requestContext.getOrientation().isRT() ? "v-application--is-rtl" : "v-application--is-ltr";

      out.write("\n");
      out.write("<script type=\"text/javascript\" defer=\"defer\">\n");
      out.write("  let managers = new Array();\n");
      out.write("  ");

   for (int i =0 ; i < managers.size(); i++) { 
      out.write("\n");
      out.write("  managers.push({\n");
      out.write("    id: `");
      out.print(managers.get(i).getId());
      out.write("`,\n");
      out.write("    userName: `");
      out.print(managers.get(i).getIdentity().getRemoteId());
      out.write("`,\n");
      out.write("    fullName: `");
      out.print(managers.get(i).getFullName());
      out.write("`,\n");
      out.write("    avatar: `");
      out.print(managers.get(i).getAvatarUrl());
      out.write("`,\n");
      out.write("  });\n");
      out.write("  ");
} 
      out.write("\n");
      out.write("  let params = {\n");
      out.write("    id: `");
      out.print(spaceId);
      out.write("`,\n");
      out.write("    isFavorite: `");
      out.print(isFavorite);
      out.write("`,\n");
      out.write("    isMember: `");
      out.print(isMember);
      out.write("`,\n");
      out.write("    logoPath: `");
      out.print(logoPath);
      out.write("`,\n");
      out.write("    portalPath: `");
      out.print(portalPath);
      out.write("`,\n");
      out.write("    logoTitle: `");
      out.print(logoTitle);
      out.write("`,\n");
      out.write("    membersNumber: `");
      out.print(membersNumber);
      out.write("`,\n");
      out.write("    spaceDescription: `");
      out.print(spaceDescription);
      out.write("`,\n");
      out.write("    managers: managers,\n");
      out.write("    homePath: `");
      out.print(homePath);
      out.write("`\n");
      out.write("  };\n");
      out.write("  document.addEventListener('spaceDetailUpdated', event => {\n");
      out.write("    const space = event && event.detail;\n");
      out.write("    if (space && space.displayName) {\n");
      out.write("      document.querySelector('.logoTitle').innerText = space.displayName;\n");
      out.write("      document.querySelector('.logoContainer .spaceAvatar').src = space.avatarUrl;\n");
      out.write("    }\n");
      out.write("  });\n");
      out.write("</script>\n");
      out.write("<div class=\"VuetifyApp\">\n");
      out.write("  <div data-app=\"true\"\n");
      out.write("       class=\"v-application border-box-sizing ");
      out.print( directionVuetifyClass );
      out.write(" theme--light\"\n");
      out.write("       id=\"brandingTopBar\" flat=\"\">\n");
      out.write("    <div class=\"v-application--wrap\">\n");
      out.write("      <div class=\"container pa-0 ps-3\">\n");
      out.write("        <div class=\"d-flex mx-0 pa-0\">\n");
      out.write("          ");
 if (space == null) { 
      out.write("\n");
      out.write("          ");
 if (logoPath != null) { 
      out.write("\n");
      out.write("          <a id=\"UserHomePortalLink\" href=\"");
      out.print(portalPath);
      out.write("\" class=\"pe-3 logoContainer\">\n");
      out.write("            <img src=\"");
      out.print(logoPath);
      out.write("\" class=\"");
      out.print(imageClass);
      out.write("\" alt=\"");
      out.print( logoTitle);
      out.write("\">\n");
      out.write("          </a>\n");
      out.write("          ");
 } 
      out.write("\n");
      out.write("          <a href=\"");
      out.print(portalPath);
      out.write("\" title=\"");
      out.print(logoTitle);
      out.write("\"\n");
      out.write("             class=\"ps-2 align-self-center brandingContainer ");
      out.print(titleClass);
      out.write("\">\n");
      out.write("            <div class=\"logoTitle subtitle-2 font-weight-bold text-truncate\">\n");
      out.write("              ");
      out.print( logoTitle);
      out.write("\n");
      out.write("            </div>\n");
      out.write("          </a>\n");
      out.write("          ");
 } else { 
      out.write("\n");
      out.write("          <div app-data=\"true\" id=\"SpaceTopBannerLogo\">\n");
      out.write("            <script type=\"text/javascript\">\n");
      out.write("              require([\"SHARED/spaceBannerLogoPopover\"], app => app.init(params));\n");
      out.write("            </script>\n");
      out.write("          </div>\n");
      out.write("          ");
 } 
      out.write("\n");
      out.write("        </div>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
