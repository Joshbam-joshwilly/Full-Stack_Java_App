/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.60
 * Generated at: 2023-08-24 09:56:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.login;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Set;
import java.util.List;
import org.gatein.portal.controller.resource.ResourceRequestHandler;
import org.exoplatform.container.PortalContainer;
import org.exoplatform.services.resources.LocaleConfig;
import org.exoplatform.services.resources.Orientation;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.exoplatform.services.resources.Orientation");
    _jspx_imports_classes.add("org.exoplatform.services.resources.LocaleConfig");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.exoplatform.container.PortalContainer");
    _jspx_imports_classes.add("org.gatein.portal.controller.resource.ResourceRequestHandler");
    _jspx_imports_classes.add("java.util.Set");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

  response.setCharacterEncoding("UTF-8");
  response.setContentType("text/html; charset=UTF-8");

  String contextPath = request.getContextPath();

  // Styles
  List<String> skinUrls = (List<String>) request.getAttribute("skinUrls");

  // Scripts
  List<String> headerScripts = (List<String>) request.getAttribute("headerScripts");
  Set<String> pageScripts = (Set<String>) request.getAttribute("pageScripts");
  String jsConfig = (String) request.getAttribute("jsConfig");
  String inlineScripts = (String) request.getAttribute("inlineScripts");

  // Branding
  String brandingPrimaryColor = (String) request.getAttribute("brandingPrimaryColor");
  String brandingThemeUrl = (String) request.getAttribute("brandingThemeUrl");

  // Locale
  LocaleConfig localeConfig = (LocaleConfig) request.getAttribute("localeConfig");
  String browserLanguage = localeConfig.getLocale().getLanguage();
  Orientation orientation = localeConfig.getOrientation();
  String direction = orientation.isLT() ? "ltr" : "rtl";

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\"\n");
      out.write("  xml:lang=\"");
      out.print(browserLanguage);
      out.write("\"\n");
      out.write("  lang=\"");
      out.print(browserLanguage);
      out.write("\"\n");
      out.write("  dir=\"");
      out.print(direction);
      out.write("\">\n");
      out.write("<head>\n");
      out.write("  ");
      out.write("\n");
      out.write("  <title>Login</title>\n");
      out.write("  <!-- Metadatas -->\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"theme-color\" content=\"");
      out.print(brandingPrimaryColor);
      out.write("\" />\n");
      out.write("  <!-- Preload Styles & Fonts & Scripts for HTTP/2 optimizations -->\n");
      out.write("  <link rel=\"preload\" href=\"/eXoSkin/skin/fonts/vuetify/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2\" as=\"font\" type=\"font/woff2\" crossorigin />\n");
      out.write("  <link rel=\"preload\" href=\"/eXoSkin/skin/fonts/vuetify/fa-solid-900.woff2\" as=\"font\" type=\"font/woff2\" crossorigin />\n");
      out.write("  <link rel=\"preload\" href=\"/eXoSkin/skin/fonts/vuetify/fa-regular-400.woff2\" as=\"font\" type=\"font/woff2\" crossorigin />\n");
      out.write("  <link rel=\"preload\" href=\"/eXoSkin/skin/fonts/vuetify/materialdesignicons-webfont.woff2?v=5.9.55\" as=\"font\" type=\"font/woff2\" crossorigin />\n");
      out.write("  <link rel=\"preload\" href=\"/eXoSkin/skin/fonts/Ionic/ionicons.ttf\" as=\"font\" type=\"font/ttf\" crossorigin />\n");
      out.write("  <link rel=\"preload\" href=\"/eXoSkin/skin/fonts/PLF-FONT-ICONS.ttf?-m9uidt\" as=\"font\" type=\"font/ttf\" crossorigin />\n");
      out.write("  <link rel=\"preload\" as=\"style\" type=\"text/css\" href=\"");
      out.print(brandingThemeUrl);
      out.write("\" />\n");
      out.write("  ");
 for(String skinUrl : skinUrls) { 
      out.write("\n");
      out.write("  <link rel=\"preload\" href= \"");
      out.print(skinUrl);
      out.write("\" as=\"style\" type=\"text/css\" />\n");
      out.write("  ");
 } 
      out.write('\n');
      out.write(' ');
      out.write(' ');
 for (String url : pageScripts) { 
      out.write("\n");
      out.write("  <link rel=\"preload\" href= \"");
      out.print(url);
      out.write("\" as=\"script\" type=\"text/javascript\" />\n");
      out.write("  ");
 } 
      out.write("\n");
      out.write("  <!-- Styles -->\n");
      out.write("  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"");
      out.print( request.getAttribute("brandingFavicon") );
      out.write("\" />\n");
      out.write("  <link id=\"brandingSkin\" rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(brandingThemeUrl);
      out.write("\" />\n");
      out.write("  ");
 for(String skinUrl : skinUrls) { 
      out.write("\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(skinUrl);
      out.write("\" />\n");
      out.write("  ");
 } 
      out.write("\n");
      out.write("  <!-- Scripts -->\n");
      out.write("  <script type=\"text/javascript\">\n");
      out.write("   var require = ");
      out.print( jsConfig );
      out.write(";\n");
      out.write("  </script>\n");
      out.write("  ");
 for (String url : headerScripts) { 
      out.write("\n");
      out.write("  <script type=\"text/javascript\" src=\"");
      out.print( url );
      out.write("\"></script>\n");
      out.write("  ");
 } 
      out.write("\n");
      out.write("  <script type=\"text/javascript\">\n");
      out.write("   require(['SHARED/bootstrap'], function() {\n");
      out.write("     eXo.env.portal.context = \"");
      out.print(contextPath);
      out.write("\";\n");
      out.write("     eXo.env.portal.containerName = \"");
      out.print(PortalContainer.getInstance().getName());
      out.write("\";\n");
      out.write("     eXo.env.portal.language='");
      out.print( browserLanguage );
      out.write("';\n");
      out.write("     eXo.env.portal.orientation='");
      out.print( direction );
      out.write("';\n");
      out.write("     eXo.env.portal.rest = '");
      out.print( PortalContainer.getCurrentRestContextName() );
      out.write("';\n");
      out.write("     eXo.env.server.context = \"");
      out.print(contextPath);
      out.write("\";\n");
      out.write("     eXo.env.client.assetsVersion = \"");
      out.print(ResourceRequestHandler.VERSION);
      out.write("\";\n");
      out.write("     eXo.env.portal.vuetifyPreset = {\n");
      out.write("       dark: true,\n");
      out.write("       silent: true,\n");
      out.write("       iconfont: 'mdi',\n");
      out.write("       rtl: eXo.env.portal.orientation === 'rtl',\n");
      out.write("       theme: { disable: true },\n");
      out.write("     };\n");
      out.write("     eXo.developing = ");
      out.print(org.exoplatform.commons.utils.PropertyManager.isDevelopping());
      out.write(";\n");
      out.write("     ");
      out.print(inlineScripts);
      out.write(";\n");
      out.write("   });\n");
      out.write("  </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <div class=\"VuetifyApp\">\n");
      out.write("    <div id=\"loginApplication\"></div>\n");
      out.write("  </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
